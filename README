A repo of some small tools
==========================

uushar (manual: uushar.1):
   Writes a sh(1) shell script to the standard output which will
   recreate the file hierarchy specified by the command line operands.
   Directories will be recreated and must be specified before the files
   they contain.  Compared to the well-known shar(1) program, uushar(1)
   adds optional compression and an uuencode(1)/uudecode(1) binary
   safe layer::

      $ uushar [-(Z|z|J|j)] file ...

   It is easy to insert trojan horses into uushar files.  It is thus
   strongly recommended that all shell archive files be examined before
   running them through sh(1).  Archives produced using this
   implementation of uushar may be easily examined with the command::

      $ grep '^[^X#]' shar.file

   Note that the uudecode(1) program must be capable of decoding to
   /dev/stdout, i.e., it must be POSIX compliant (Issue 6 iirc).

   2014-02-27: rewritten: short options, check and forbid filenames with
   embedded double quotes, added uushar.1 manual.

gen-uushar-wrapper:
   Creates a shell archive similar to uushar as above, except that the
   archive (1) consists only of executable file members, and (2) will
   be itself executable.  Run it (the generated shell archive script)
   to invoke any of the programs contained therein.  On the first run,
   the wrapper will create a hidden directory in your $TMPDIR to unpack
   the archive members therein.  Run without arguments to show its
   contents and the creation date.
   It needs no manual, simply execute it and it will guide you through
   the archive creation process.

   Note that the uudecode(1) program must be capable of decoding to
   /dev/stdout, i.e., it must be POSIX compliant (Issue 6 iirc).

   2014-03-05: rewritten: check and forbid filenames with embedded
   double quotes, ensure the given default executable, if any, is part
   of the generated archive, reexecute after archive expansion, truly
   disallow empty archive name.

real-periodic.sh:
   A _real_ periodic for NetBSD, FreeBSD, DragonFly BSD and OpenBSD that
   ensures that the daily/weekly/monthly maintenance stuff is executed,
   even if your laptop is running only one hour a day.  Invoke this once
   per hour in the roots crontab and disable the usual periodic stuff of
   your system instead.  Note it doesn't deal with timezone and DST
   (daylight saving time) switches, but instead only checks the day of
   the year that is reported by date(1).  E.g., on my FreeBSD 10.0 box::

      # do daily/weekly/monthly maintenance
      15  * * * * root /usr/bin/nice -n 15 /usr/libexec/real-periodic.sh
      #1  3 * * * root periodic daily
      #15 4 * * 6 root periodic weekly
      #30 5 1 * * root periodic monthly

   2015-08-24: newer periodic(8) sleep in between jobs, so update the DB
   before we start it!

git-topic-creator.pl:
   To ease maintaining of topic branches i use a linear history, so
   that i can use ``$ git rebase -i`` for fixups and squashes, without
   having to worry about recreation of topic branches.  Instead i tag
   commit messages, and use this script to create the topics once i'm
   finished.  Read the --help output for more, and make use of verbosity
   when you use it first.

   2013-09-13: newer git(1) reverse ``rev-parse`` output: adjusted.

arena-manager.sh:
   Offers some automatized operations on revision control repositories,
   like updating, (fast-forward) merging, garbage-collecting.

   2016-XX-XX: complete rewrite that completely replaces the old
   ``arena-manager`` and requires only a POSIX environment (no perl(1)).
   The new ``setup`` mode must be used to initialize a managed
   (git(1)-based) repository; this results in a much more powerful
   functionality and automatization.  Please look into the script header
   for more.  The old script has been removed (see ``git(1)`` history).

Even of less widespread usability:

gmane-fetch.pl:
   Download NNTP articles from Gmane.org, incrementally, and store them in
   (append them to) a local MBOX.
   Read and adjust the script header for documentation and configuration.

git-simple-push.sh:
   Synchronize a bunch of local repos with their remotes.
   Brute simple version that can only push.
   Needs awk(1).

git-pre-commit.sh:
   git(1)'s diff --check does unfortunately not offer a mode which
   detects NBSP (non-breaking space, U+00A0) characters.
   This is a real problem for keyboards (layouts) which produce combined
   sequences, i.e., the german keyboard produces NBSP for ALT+SPC, but
   it also requires ALT to get any of []|{} (ALT+[5-9]).  So NBSPs
   happen.  This script can be used as (a template for a custom)
   pre-commit hook, now that i've looked at it again (2013-05-13).

   It also handles non-space indentations, tabulators and mixed
   (space-before-tabs) indents, dependent on the environment variables
   NSPACEINDENT, TABINDENT and MIXINDENT, respectively.  Setting
   MKFILEDIG will treat [Mm]akefile and *.mk files specially.
   E.g., this is one of my pre-commit hooks::

      #!/bin/sh -
      MIXINDENT=1
      export MIXINDENT
      exec "$HOME/usr/bin/git-pre-commit.sh" "${@}"

   2014-04-14: added MKFILEDIG.

s-ws-check.pl:
   Check indentation, trailing whitespace and non-breaking spaces (see
   git-pre-commit.sh above) for all files given on the command line.
   Sufficient for a needed quick-n-dirty check of some random file;
   now that i've looked at it again (2013-05-13).

   2014-04-14: added MKFILEDIG.

s-base64.c:
   Encode to/decode from Base64 content-transfer-encoding, as specified
   in RFC 2045, section 6.8.  Rather failure-tolerant...

   2014-07-29: fixed SIGSEGV which could happen because of ignoring
   errors during base64 decoding; this tool needs a rewrite to actually
   do what it is supposed to, i.e., provide a failure-tolerant decoding
   facility: it should print something like `xy bytes remain unparsed'
   after an error occurred instead of simply stating that there was
   invalid base64.

s-idn.c:
   Simple GNU Libidn based thing that encodes and decodes IDNs.
   Rather identical to the idn utility that comes with that one, but
   i needed to get comfortable with Libidn and so i've wrote it.

showkey.c:
   Show keyboard scancodes for FreeBSD, OpenBSD, NetBSD and Linux.
   This is not yet finished but for Linux.  But it should help to get
   you going.  (Unfortunately the BSDs are not so documented and i
   need to dig into the kernel sources to implement the missing pieces.)

   2015-10-20: make it compile via c99(1) under Linux.

backup.pl:
   My private backup script.  Simple (uses tar(1)), but does some stuff
   which i need for my work flow (backups data which is in local repo
   clones but not yet pushed to their "real" counterparts).

   2015-09-02: no longer following symbolic links
   2015-10-09: add -b/--basename option, add $COMPRESSOR variable, start
               via shell and $PERL5OPT clear to avoid multibyte problems

super-shutdown.c:
   Single setuid root BSD program to invoke /sbin/shutdown(8), either
   to reboot or to halt the system.
   You've been warned.

cdoc-freebsd.S:
   FreeBSD 5.3 x86 prog to open/close /dev/cdrom tray.  May work on
   newer ones, but haven't tried it in a while.  It had 416 object
   file bytes when everything was placed in ``.text`` (no .EH frames
   back then).

openbsd-changelog-plus.pl,
openbsd-changeset-plus.pl:
   Simple scripts to ease maintaining of OpenBSD plus.html entries.

# s-it-mode
