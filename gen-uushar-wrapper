#!/bin/sh -
#@ gen-uushar-wrapper creates a shar(1)-like shell archive (but with
#@ uuencode(1)d content) of given files (read from STDIN or ARGV), that is
#@ itself executable.
#@ Execute it (the generated archive) to invoke any of the programs contained
#@ therein.  On the first run with arguments, the wrapper will create a hidden
#@ directory in your $TMPDIR to unpack the archive therein; without arguments
#@ it will always print creation time and members shipped.
#
# Copyright (c) 2012 - 2021 Steffen Nurpmeso <steffen@sdaoden.eu>.
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

##  --  >8  --  8<  --  ##
ARGS=${@}

echo 'So let us create an uuencoded shell archive of the given utilities.'
echo 'Please answer the upcoming questions for this to work.'
echo 'You can at any time interrupt with CTRL-C.'

printf '\nWhat should be the name of the wrapper: [] '
read SHAR
if [ -z "${SHAR}" ]; then
   echo >&2 'Cannot use the empty string for that, bailing out.'
   exit 1
fi
SHAR="${SHAR}.sh"
if [ -f "${SHAR}" ]; then
   echo >&2 "\`${SHAR}' already exists, bailing out."
   exit 1
fi

printf "Yay, it will be \`${SHAR}'.\n\n%s\n%s\n%s" \
   "The special command \`+' should map to a subcommand?" \
   "(As in: '\$ ${SHAR} + -h' -> '\$ SUBCOMMAND -h')?" \
   'Enter desired command or the empty string otherwise [] '
read SHAR_DEFEXEC
if [ -n "${SHAR_DEFEXEC}" ]; then
   SHAR_DEFEXEC="`basename \"${SHAR_DEFEXEC}\"`"
   echo "..this is \`${SHAR_DEFEXEC}'"
   NEED_DEFEXEC=0
fi

printf '\n%s\n%s' \
   'Members can be compressed via compress(1), gzip(1), bzip2(1) and xz(1).' \
   'Enter desired compressor or the empty string otherwise. [] '
read COMPRESS
if [ -n "${COMPRESS}" ]; then
   x_compress='compress -cf'
   ux_compress='uncompress -cf'
   x_gzip='gzip -cf'
   ux_gzip='gzip -cdf'
   x_bzip2='bzip2 -cf'
   ux_bzip2='bzip2 -cdf'
   x_xz='xz -cf'
   ux_xz='xz -cdf'

   eval cfun='${x_'"$COMPRESS"'}'
   eval xfun='${ux_'"$COMPRESS"'}'
   if [ -z "${cfun}" ]; then
      echo >&2 "Unsupported compression method, bailing out: ${COMPRESS}"
      exit 1
   fi
fi

echo
echo 'Enter member programs to include, empty value to terminate list.'
MEMBERS= MEMBER_BASENAMES=
[ -n "${ARGS}" ] && set -- ${ARGS}
while :; do
   if [ -n "${ARGS}" ]; then
      [ ${#} -eq 0 ] && break
      i=${1}
      shift
      printf '\t- '
   else
      printf '\t - [] '
      read i
      [ -z "${i}" ] && break
   fi

   if [ -x "${i}" ]; then
      :
   else
      echo >&2 "${i} does not exist or is not executable, bailing out."
      exit 1
   fi
   if { j=${i}; echo ${j}; } | grep -q '"'; then
      echo >&2 "Double-quotes in filenames are unsupported, bailing out: ${i}"
      exit 1
   fi

   j=`basename "${i}"`
   if [ -z "${MEMBERS}" ]; then
      MEMBERS="${i}"
      MEMBER_BASENAMES="${j}"
   else
      MEMBERS="${MEMBERS}, ${i}"
      MEMBER_BASENAMES="${MEMBER_BASENAMES}, ${j}"
   fi
   [ "${j}" = "${SHAR_DEFEXEC}" ] && unset NEED_DEFEXEC
   echo "${i}: ok"
done

if [ -n "${SHAR_DEFEXEC}" ] && [ -n "${NEED_DEFEXEC}" ]; then
   echo >&2 "The default executable is missing, bailing out: ${SHAR_DEFEXEC}"
   exit 1
fi

# Everything get.set.go, so write the actual shell archive
# (Not backward compatible with Bourne [-C], atomicity problem: set -C)
echo '..creating archive..'
CREATION_DATE=`date -u`

# Header
cat <<\! > "${SHAR}"
#!/bin/sh -
#@ This file has been created by gen-uushar-wrapper, which is
# Copyright (c) 2012 - 2021 Steffen Nurpmeso <steffen@sdaoden.eu>.
#@ by means of the ISC license.
#@ It contains a shell-archive-execution-environment.
#@ Run it, and it will tell you which executable files it contains.
#@ Run it with the name of such an executable, and it will create a
#@ hidden directory in your $TMPDIR to expand the shipped executables.
#@ From then on, it will redirect its invocations to those programs.
#
#@ Archives produced using this implementation of gen-uushar-wrapper
#@ may be easily examined with the command:
#@    $ grep '^[^X#]' shell-archive
#
!

# Its indeed our $SHAR
trap "rm -rf '${SHAR}'" 0

# A shell archive is not a transparent thing either!
echo >> "${SHAR}" "SHAR='${SHAR}'"
echo >> "${SHAR}" "CREATION_DATE='${CREATION_DATE}'"
echo >> "${SHAR}" "MEMBERS='${MEMBER_BASENAMES}'"
echo >> "${SHAR}" "# Default expansion (if argument \${1} equals \`+'):"
echo >> "${SHAR}" "DEFEXEC='${SHAR_DEFEXEC}'"
cat <<\! >> "${SHAR}"
#
[ ${#} -eq 0 ] &&
   { echo "Creation: ${CREATION_DATE}"; echo "Members: ${MEMBERS}"; exit 0; }
#
i="${TMPDIR}/.${SHAR}"
if [ -d "${i}" ]; then
   PATH="${i}:${PATH}"
   export PATH
   [ x"${1}" != 'x+' ] && DEFEXEC=${1}
   shift
   i="${i}/${DEFEXEC}"
   if [ ! -f "${i}" ] || [ ! -x "${i}" ]; then
      echo >&2 "Sorry, there is no program \`${DEFEXEC}' in this archive"
      exit 54
   fi
   exec "${i}" ${@+"${@}"}
   echo >&2 "Failed to execute <${DEFEXEC} ${@+\"${@}\"}>"
   exit 71 # 71=EX_OSERR
fi
#
printf "%s\n%s\n" "The directory \`${i}'" \
   "does not exist: creating it and expanding this archive first"
MYSELF="`pwd`/${0}"
[ ${?} -ne 0 ] && { echo >&2 "Cannot detect current directory"; exit 1; }
mkdir -p "${i}" || { echo >&2 "Cannot create directory \`${i}'"; exit 1; }
cd "${i}" ||
   { echo >&2 "Cannot cd into \`${i}', removing it"; rm -rf "${i}"; exit 1; }
#
!

# uuencode(1)d and optionally compress the members to embed
oifs=${IFS}
IFS=', '
set -- ${MEMBERS}
IFS=${oifs}
for i
do
   bi=`basename "${i}"`
   echo >> "${SHAR}" "echo 'X - ${bi}'"
   if [ -z "${cfun}" ]; then
      echo >> "${SHAR}" \
         "sed 's/^X//' << \! |\
            uudecode -o /dev/stdout > \"${bi}\"; chmod 0755 \"${bi}\""
      < "${i}" uuencode -m /dev/stdout | sed 's/^/X/' >> "${SHAR}"
   else
      echo >> "${SHAR}" \
         "sed 's/^X//' << \! | uudecode -o /dev/stdout | ${xfun} > \"${bi}\";\
          chmod 0755 \"${bi}\""
      < "${i}" ${cfun} | uuencode -m /dev/stdout | sed 's/^/X/' >> "${SHAR}"
   fi
   echo >> "${SHAR}" '!'
   echo >> "${SHAR}" "# END of ${bi}"
done

echo >> "${SHAR}" "echo 'Archive is expanded, rerunning command...'"
echo >> "${SHAR}" 'exec "${MYSELF}" ${@+"${@}"}'

# The end
chmod 0755 "${SHAR}"
trap : 0
exit 0
# vim:set fenc=utf-8 syntax=sh:s-it-mode
